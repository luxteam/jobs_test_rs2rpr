source convertRS2RPR.mel;

global proc rpr_render(string $scene){{

    optionVar -rm "RPR_DevicesSelected";
    optionVar -iva "RPR_DevicesSelected" 1;

    string $scenes_cam_fix_1[] = {{ "LightEnv.ma", "LightEnv1.ma", "LightEnv2.ma", "LightEnv3.ma", "LightDome1.ma", "LightDome2.ma", "LightDome3.ma", "LightDome4.ma", "LightDome5.ma", "LightDome6.ma", "LightDome7.ma",
        "IES1.ma", "IES2.ma", "IES3.ma", "IES4.ma", "IES5.ma", "IES6.ma",
        "PhysicalSky1.ma", "PhysicalSky2.ma", "PhysicalSky3.ma", "PhysicalSky4.ma", "PhysicalSky5.ma", "PhysicalSky6.ma", "PhysicalSky7.ma",
        "Triplanar.ma", "Triplanar1.ma", "Triplanar2.ma", "Triplanar3.ma", "Triplanar4.ma", "Triplanar5.ma", "Triplanar6.ma", "Triplanar7.ma", "Triplanar8.ma", "Triplanar9.ma",
        "Architectural1.ma", "Architectural10.ma", "Architectural11.ma", "Architectural12.ma", "Architectural2.ma", "Architectural3.ma", "Architectural4.ma", "Architectural5.ma", "Architectural6.ma", "Architectural7.ma", "Architectural8.ma", "Architectural9.ma",
        "rsMaterial.ma", "rsMaterial1.ma", "rsMaterial10.ma", "rsMaterial11.ma", "rsMaterial12.ma", "rsMaterial13.ma", "rsMaterial14.ma", "rsMaterial15.ma", "rsMaterial16.ma", "rsMaterial17.ma", "rsMaterial18.ma", "rsMaterial19.ma", "rsMaterial2.ma", "rsMaterial20.ma", "rsMaterial21.ma", "rsMaterial22.ma", "rsMaterial23.ma", "rsMaterial24.ma", "rsMaterial25.ma", "rsMaterial26.ma", "rsMaterial27.ma", "rsMaterial28.ma", "rsMaterial29.ma", "rsMaterial3.ma", "rsMaterial30.ma", "rsMaterial31.ma", "rsMaterial32.ma", "rsMaterial33.ma", "rsMaterial34.ma", "rsMaterial35.ma", "rsMaterial36.ma", "rsMaterial37.ma", "rsMaterial38.ma", "rsMaterial39.ma", "rsMaterial4.ma", "rsMaterial40.ma", "rsMaterial41.ma", "rsMaterial42.ma", "rsMaterial43.ma", "rsMaterial44.ma", "rsMaterial5.ma", "rsMaterial6.ma", "rsMaterial7.ma", "rsMaterial8.ma", "rsMaterial9.ma",
        "LightArea.ma", "LightArea1.ma", "LightArea10.ma", "LightArea11.ma", "LightArea12.ma", "LightArea2.ma", "LightArea3.ma", "LightArea4.ma", "LightArea5.ma", "LightArea6.ma", "LightArea7.ma", "LightArea8.ma", "LightArea9.ma", "LightAreaCylinder.ma", "LightAreaDisk.ma", "LightAreaMesh.ma", "LightAreaRectangle.ma", "LightAreaSize100.ma", "LightAreaSize50.ma", "LightAreaSize50x25.ma", "LightAreaSphere.ma",
        "LightPhysDirect.ma", "LightPhysDirect1.ma", "LightPhysDirect2.ma", "LightPhysDirect3.ma", "LightPhysDirect4.ma", "LightPhysDirect5.ma",
        "LightPoint.ma", "LightPoint1.ma", "LightPoint10.ma", "LightPoint2.ma", "LightPoint3.ma", "LightPoint4.ma", "LightPoint5.ma", "LightPoint6.ma", "LightPoint7.ma", "LightPoint8.ma", "LightPoint9.ma",
        "SpotLight.ma", "SpotLight1.ma", "SpotLight10.ma", "SpotLight11.ma", "SpotLight2.ma", "SpotLight3.ma", "SpotLight4.ma", "SpotLight5.ma", "SpotLight6.ma", "SpotLight7.ma", "SpotLight8.ma", "SpotLight9.ma" }};
    
    string $scenes_cam_fix_2[] = {{ "VolumeScattering.ma", "VolumeScattering1.ma", "VolumeScattering2.ma", "VolumeScattering3.ma", "VolumeScattering4.ma", "VolumeScattering5.ma", "VolumeScattering6.ma", "VolumeScattering7.ma", "VolumeScattering8.ma", "VolumeScattering9.ma",
    "LightPortal.ma", "LightPortal1.ma", "LightPortal2.ma", "LightPortal3.ma", "LightPortal4.ma", "LightPortal5.ma" }};
    
    if ( catch (`lookThru camera1`)) {{
        print "[ERROR]: no camera1\n";
    }}
    else {{
        for ($each in $scenes_cam_fix_1) {{
            if ($each == $scene) {{
                if ( catch (`setAttr "cameraShape1.focalLength" 52.3`)) {{
                    print "[ERROR]: Can't set focalLength\n";
                }}
            }}
        }}
        for ($each in $scenes_cam_fix_2) {{
            if ($each == $scene) {{
                if ( catch (`setAttr "cameraShape1.focalLength" 36`)) {{
                    print "[ERROR]: Can't set focalLength\n";
                }}
            }}
        }}
    }}

    fireRender -waitForItTwo;
    renderIntoNewWindow render;
    sysFile -makeDir ("{work_dir}" + "/Color");
    string $ff = "{work_dir}" + "/Color/converted_" + $scene;
    renderWindowEditor -edit  -dst "color" renderView;
    renderWindowEditor -edit -com -writeImage $ff renderView;
}}

global proc prerender(string $scene, int $rpr_iter){{

    string $scene_name  = `file -q -sn -shn`;
    print ("Processing: " + $scene_name + "\n");
    if ($scene_name != $scene) {{
        if (catch (`file -f -options "v=0;"  -ignoreVersion -o $scene`) == "1") {{
            evalDeferred("quit -abort");
        }}
    }}

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if( `pluginInfo -query -loaded redshift4maya` == 0){{
        loadPlugin redshift4maya;
    }}

    python("import convertRS2RPR; convertRS2RPR.auto_launch()")
    print "Conversion finished.\n";

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" $rpr_iter;

    rpr_render($scene);
    print "Render finished.\n";

    string $render_device_name[] = `optionVar -q "RPR_DevicesName"`;

    string $filePath = "{work_dir}" + "/" + $scene + "_RPR.json";
    int $fileID = `fopen $filePath "a"`;
    fprint $fileID ("[");
    fprint $fileID ("\r\n {{");
    fprint $fileID ("\r\n  \"render_device\": \"" + $render_device_name[0] + "\",");
    fprint $fileID ("\r\n  \"tool\": \"Maya " + `about -version` + "\",");
    fprint $fileID ("\r\n  \"date_time\": \"" + `date -format "DD/MM/YYYY hh:mm:ss"` + "\",");
    fprint $fileID ("\r\n  \"render_version\": \"" + getRPRPluginVersion() + "\",");
    fprint $fileID ("\r\n  \"core_version\": \"" + getRprCoreVersion() + "\",");
    fprint $fileID ("\r\n  \"file_name\": \"" + "converted_" + $scene + ".jpg\",");
    fprint $fileID ("\r\n  \"render_color_path\": \"Color/converted_" + $scene + ".jpg\",");
    fprint $fileID ("\r\n  \"baseline_color_path\": \"Color/" + $scene + ".jpg\",");
    fprint $fileID ("\r\n  \"scene_name\": \"" + $scene + "\",");
    fprint $fileID ("\r\n  \"render_time\": 1,");
    fprint $fileID ("\r\n  \"test_case\": \"" + $scene + "\",");
    fprint $fileID ("\r\n  \"difference_color\": \"" + "not compared yet" + "\",");
    fprint $fileID ("\r\n  \"test_status\": \"" + "passed" + "\"");
    fprint $fileID ("\r\n }}");
    fprint $fileID ("\r\n]");
    fclose $fileID;

}}

global proc main(){{
    setProject ("{res_path}");
    
    {tests}

    evalDeferred("quit -abort");
}}
